{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\OneDrive\\\\linux-files\\\\tic-tac-toe-game\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\n\n/* Se clicarmos em qualquer passo no histórico do jogo, o tabuleiro do Jogo da Velha deve atualizar imediatamente para mostrar como ficou depois que aquele passo ocorreu.\r\n\r\nPara isso, nós...\r\n  - Adicionamos a propriedade stepNumber ao state do componente Game para indicar qual etapa do jogo estamos visualizando no momento.\r\n\r\n  - Implementamos o método jumpTo para atualizar o stepNumber ao clicar no <button> \"Go to\".\r\n\r\n  - Modificamos a constante current do método render do componente Game para deixar de renderizar sempre a última jogada e passar a renderizar apenas a jogada selecionada atualmente (baseada em this.state.stepNumber).\r\n\r\n  - Modificamos método handleClick para atualizar stepNumber após preenchermos um quadrado do jogo. Desta forma, não ficaremos presos mostrando a mesma jogada após uma nova ter sido feita.\r\n\r\n  - Modificamos a constante history no método handleClick para cortar (slice()) a array baseada no stepNumber. Desta maneira, se “voltarmos no tempo” e fizermos um novo movimento a partir desse ponto, jogaremos fora toda a história “futura” que agora estaria incorreta.\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Square(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    children: props.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_c = Square;\nclass Board extends React.Component {\n  renderSquare(i) {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  }\n}\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      stepNumber: 0,\n      //adicionamos a propriedade stepNumber ao state inicial do componente Game para indicar qual passo estamos visualizando no momento. Ele reflete a jogada mostrada ao usuário nesse momento.\n      xIsNext: true\n    };\n  }\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1); //Isso garante que, se “voltarmos no tempo” e fizermos um novo movimento a partir desse ponto, jogaremos fora toda a história “futura” que agora estaria incorreta.\n\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      //stepNumber reflete a jogada mostrada ao usuário nesse momento. Após fazermos uma nova jogada, precisamos atualizar esse valor. Isso certifica que não ficaremos presos mostrando a mesma jogada após uma novo ter sido feita.\n\n      xIsNext: !this.state.xIsNext\n    });\n  }\n  jumpTo(step) {\n    this.setState({\n      //O jumpTo atualizará o valor em stepNumber\n      stepNumber: step,\n      xIsNext: step % 2 === 0 //definimos xIsNext para true caso o número que estejamos atribuindo a stepNumber seja par\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber]; // Modificamos o método render do componente Game para deixar de renderizar sempre a última jogada e passar a renderizar apenas a jogada selecionada atualmente, de acordo com stepNumber.\n\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move : 'Go to game start';\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.jumpTo(move),\n          children: desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)\n      }, move, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this);\n    });\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          squares: current.squares,\n          onClick: i => this.handleClick(i)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: moves\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this);\n  }\n}\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n// ========================================\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 184,\n  columnNumber: 13\n}, this));\nvar _c;\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"names":["React","ReactDOM","Square","props","onClick","value","Board","Component","renderSquare","i","squares","render","Game","constructor","state","history","Array","fill","stepNumber","xIsNext","handleClick","slice","current","length","calculateWinner","setState","concat","jumpTo","step","winner","moves","map","move","desc","status","lines","a","b","c","root","createRoot","document","getElementById"],"sources":["C:/Users/Usuario/OneDrive/linux-files/tic-tac-toe-game/src/index.js"],"sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\n\r\n/* Se clicarmos em qualquer passo no histórico do jogo, o tabuleiro do Jogo da Velha deve atualizar imediatamente para mostrar como ficou depois que aquele passo ocorreu.\r\n\r\nPara isso, nós...\r\n  - Adicionamos a propriedade stepNumber ao state do componente Game para indicar qual etapa do jogo estamos visualizando no momento.\r\n\r\n  - Implementamos o método jumpTo para atualizar o stepNumber ao clicar no <button> \"Go to\".\r\n\r\n  - Modificamos a constante current do método render do componente Game para deixar de renderizar sempre a última jogada e passar a renderizar apenas a jogada selecionada atualmente (baseada em this.state.stepNumber).\r\n\r\n  - Modificamos método handleClick para atualizar stepNumber após preenchermos um quadrado do jogo. Desta forma, não ficaremos presos mostrando a mesma jogada após uma nova ter sido feita.\r\n\r\n  - Modificamos a constante history no método handleClick para cortar (slice()) a array baseada no stepNumber. Desta maneira, se “voltarmos no tempo” e fizermos um novo movimento a partir desse ponto, jogaremos fora toda a história “futura” que agora estaria incorreta.\r\n*/\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n      }],\r\n      stepNumber: 0, //adicionamos a propriedade stepNumber ao state inicial do componente Game para indicar qual passo estamos visualizando no momento. Ele reflete a jogada mostrada ao usuário nesse momento.\r\n      xIsNext: true\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1); //Isso garante que, se “voltarmos no tempo” e fizermos um novo movimento a partir desse ponto, jogaremos fora toda a história “futura” que agora estaria incorreta.\r\n\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares,\r\n      }]),\r\n\r\n      stepNumber: history.length, //stepNumber reflete a jogada mostrada ao usuário nesse momento. Após fazermos uma nova jogada, precisamos atualizar esse valor. Isso certifica que não ficaremos presos mostrando a mesma jogada após uma novo ter sido feita.\r\n\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({ //O jumpTo atualizará o valor em stepNumber\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0, //definimos xIsNext para true caso o número que estejamos atribuindo a stepNumber seja par\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    const history = this.state.history;\r\n\r\n    const current = history[this.state.stepNumber]; // Modificamos o método render do componente Game para deixar de renderizar sempre a última jogada e passar a renderizar apenas a jogada selecionada atualmente, de acordo com stepNumber.\r\n\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    const moves = history.map((step, move) => {\r\n\r\n      const desc = move ?\r\n        'Go to move #' + move :\r\n        'Go to game start';\r\n\r\n      return (\r\n        <li key={move}>{/*\r\n        No histórico do Jogo da Velha, cada jogada anterior tem um único ID associado a ela: é o número sequencial da jogada.\r\n        As jogadas nunca são reordenadas, apagadas, ou inseridas no meio, então é seguro utilizar o index da jogada como a chave.*/}\r\n\r\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = 'Winner: ' + winner;\r\n    } else {\r\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nfunction calculateWinner(squares) {\r\n\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    \r\n    if (\r\n      squares[a] && squares[a] ===\r\n      \r\n      squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n// ========================================\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(<Game />);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}